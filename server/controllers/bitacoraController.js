const Bitacora = require('../models/Bitacora');
const FichaAprendiz = require('../models/FichaAprendiz');



// ‚Å°‚Å£‚Å¢‚Å£‚Äã‚Äå‚Äå‚Äç‚Äã‚Äå‚Äå‚ÄåùòäÕüùò∞ÕüùòØÕüùòµÕüùò≥Õüùò∞Õüùò≠Õüùò¢Õüùò•Õüùò∞Õüùò≥Õüùò¶Õüùò¥ ùò±Õüùò¢Õüùò≥Õüùò¢ ùòàÕüùò±Õüùò≥Õüùò¶ÕüùòØÕüùò•Õüùò™Õüùòª‚Å°:‚Äã

//‚Å°‚Å¢‚Å¢‚Å¢‚Äã‚Äå‚Äå‚ÄçùòöÕüùò∂Õüùò£Õüùò™Õüùò≥ ùòâÕüùò™ÕüùòµÕüùò¢Õüùò§Õüùò∞Õüùò≥Õüùò¢‚Äã‚Å°
exports.subirBitacora = async (req, res) => {
  try {
    const { id: id_usuario } = req.usuario;

    // Verificar relaci√≥n aprendiz-ficha
    const relacion = await FichaAprendiz.findOne({ where: { id_usuario } });
    if (!relacion) {
      return res.status(404).json({ mensaje: 'No se encontr√≥ una ficha asociada al aprendiz.' });
    }

    const id_ficha_aprendiz = relacion.id_ficha_aprendiz;

    // Calcular n√∫mero de bit√°cora
    const cantidad = await Bitacora.count({ where: { id_ficha_aprendiz } });
    const numero_bitacora = cantidad + 1;

    // Validar archivo subido
    if (!req.file) {
      return res.status(400).json({ mensaje: 'Debes subir un archivo.' });
    }

    const { filename } = req.file;

    console.log("üìù Nombre del archivo que se va a guardar:", filename);
    console.log('üì¶ Archivo recibido:', req.file);

    // Crear registro
    const nuevaBitacora = await Bitacora.create({
      numero_bitacora,
      observacion: 'Sin observaciones',
      estado_bitacora: 1, // Asumiendo que 1 = pendiente
      fecha_ultima_actualizacion: new Date(),
      bitacora: filename, // üëà Aqu√≠ lo est√°s enviando correctamente
      id_ficha_aprendiz
    });

    res.status(201).json({ mensaje: '‚úÖ Bit√°cora subida exitosamente.', data: nuevaBitacora });

  } catch (error) {
    console.error('‚ùå Error al subir bit√°cora:', error);
    res.status(500).json({ mensaje: 'Error del servidor al subir la bit√°cora.', error });
  }
};

// ‚Å°‚Å£‚Å£‚Å¢‚Äã‚Äå‚Äå‚ÄçùòùÕüùò™Õüùò¥Õüùò∂Õüùò¢Õüùò≠Õüùò™ÕüùòªÕüùò¢Õüùò≥ ùò£Õüùò™ÕüùòµÕüùò¢Õüùò§Õüùò∞Õüùò≥Õüùò¢Õüùò¥ ùò¥Õüùò∂Õüùò£Õüùò™Õüùò•Õüùò¢Õüùò¥ ùò±Õüùò∞Õüùò≥ ùò¢Õüùò±Õüùò≥Õüùò¶ÕüùòØÕüùò•Õüùò™Õüùòª‚Äã‚Å°
exports.verBitacorasSubidas = async (req, res) => {
    try {
        const { id: id_usuario } = req.usuario;

        const relacion = await FichaAprendiz.findOne({where : {id_usuario }});
        if (!relacion) {
            return res.status(404).json({ mensaje: 'No se encontr√≥ una ficha asociada al aprendiz.' });
        }
        const id_ficha_aprendiz = relacion.id_ficha_aprendiz;

        const bitacoras = await Bitacora.findAll({
            where: { id_ficha_aprendiz },
           order: [['numero_bitacora', 'ASC']]
        });
        res.status(200).json({ bitacoras });
    } catch (error ) {
        console.error('‚ùå Error al obtener bit√°coras:', error);
        res.status(500).json({ mensaje: 'Error del servidor al obtener las bit√°coras.', error });
    }
};

// ‚Å°‚Å¢‚Å£‚Å£‚Äã‚Äå‚Äå‚Äç‚Äã‚Äå‚Äå‚ÄåùòäÕüùò∞ÕüùòØÕüùòµÕüùò≥Õüùò∞Õüùò≠Õüùò¢Õüùò•Õüùò∞Õüùò≥Õüùò¶Õüùò¥ ùòéÕüùò¶ÕüùòØÕüùò¶Õüùò≥Õüùò¢Õüùò≠Õüùò¶Õüùò¥ ‚Å°‚Äã

//‚Å°‚Å£‚Å¢‚Å£‚Äã‚Äå‚Äå‚ÄçùòîÕüùò∞Õüùò•Õüùò™ÕüùòßÕüùò™Õüùò§Õüùò¢Õüùò≥ ùòâÕüùò™ÕüùòµÕüùò¢Õüùò§Õüùò∞Õüùò≥Õüùò¢‚Äã‚Å°
exports.modificarBitacora = async (req, res) => {
    try {
      const { id } = req.params;
      const { observacion, estado } = req.body;
  
      const [actualizado] = await Bitacora.update(
        {
          observacion,
          estado
        },
        {
          where: { id_bitacora: id }
        }
      );
  
      if (!actualizado) {
        return res.status(404).json({ mensaje: 'Bit√°cora no encontrada' });
      }
  
      const bitacoraActualizada = await Bitacora.findByPk(id);
      res.status(200).json({ mensaje: 'Bit√°cora actualizada', bitacoraActualizada });
  
    } catch (error) {
      console.error('‚ùå Error al actualizar bit√°cora:', error);
      res.status(500).json({ mensaje: 'Error del servidor al actualizar la bit√°cora', error });
    }
  };

  // ‚Å°‚Å¢‚Å£‚Å¢‚Äã‚Äå‚Äå‚ÄçùòåÕüùò≠Õüùò™ÕüùòÆÕüùò™ÕüùòØÕüùò¢Õüùò≥ ùòâÕüùò™ÕüùòµÕüùò¢Õüùò§Õüùò∞Õüùò≥Õüùò¢‚Äã‚Å°
  exports.eliminarBitacora = async (req, res) => {
    try {
      const { id } = req.params;
  
      const eliminado = await Bitacora.destroy({
        where: { id_bitacora: id }
      });
  
      if (!eliminado) {
        return res.status(404).json({ mensaje: 'Bit√°cora no encontrada' });
      }
  
      res.status(200).json({ mensaje: 'Bit√°cora eliminada correctamente' });
  
    } catch (error) {
      console.error('‚ùå Error al eliminar bit√°cora:', error);
      res.status(500).json({ mensaje: 'Error del servidor al eliminar la bit√°cora', error });
    }
  };

  